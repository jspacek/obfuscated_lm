
\data\
ngram 1=113
ngram 2=318

\1-grams:
-2.895422	!=	-99
-2.050324	"	-99
-2.594393	"In	-99
-2.594393	"\n"	-99
-2.895422	"a	-99
-2.196453	&&	-99
-1.327221	(	-99
-1.327221	)	-99
-2.594393	*	-99
-1.895423	+	-99
-2.293363	++	-99
-1.992333	,	-99
-2.196453	-	-99
-1.404061	.	-99
-2.895422	/	-99
-1.781479	0	-99
-2.050324	1	-99
-2.594393	10	-99
-2.895422	1000000000.0	-99
-2.895422	15	-99
-2.594393	2	-99
-2.594393	5	-99
-1.179419	;	-99
-2.418301	<	-99
-0.8126372	</s>
-99	<s>	-99
-99	<unk>
-1.376909	=	-99
-1.992333	==	-99
-2.895422	>	-99
-2.895422	Eight	-99
-2.895422	Five	-99
-2.895422	Four	-99
-2.594393	NANOS_PER_SEC	-99
-2.895422	Nine	-99
-2.418301	Rectangle	-99
-2.895422	Seven	-99
-2.895422	Six	-99
-2.594393	System	-99
-2.895422	Three	-99
-2.895422	Two	-99
-2.117271	VanillaBoilerplate	-99
-2.117271	[	-99
-2.117271	]	-99
-1.816241	a	-99
-2.895422	add	-99
-2.895422	awt	-99
-1.816241	b	-99
-2.418301	base	-99
-2.418301	boolean	-99
-1.816241	c	-99
-2.895422	char	-99
-1.94118	class	-99
-2.594393	double	-99
-2.418301	else	-99
-2.895422	equals	-99
-2.418301	exp	-99
-2.594393	fact	-99
-2.594393	final	-99
-2.895422	for	-99
-2.895422	getA	-99
-2.895422	getB	-99
-2.895422	getC	-99
-2.594393	go.	-99
-2.293363	i	-99
-2.418301	if	-99
-2.895422	import	-99
-1.418301	int	-99
-2.895422	isSquare	-99
-2.895422	java	-99
-2.594393	length	-99
-2.418301	list	-99
-2.418301	mat	-99
-2.594393	method	-99
-1.94118	n	-99
-2.895422	new	-99
-2.895422	null	-99
-2.418301	numRows	-99
-2.895422	ohsocreative	-99
-2.594393	out	-99
-2.293363	pos	-99
-2.594393	pow	-99
-2.594393	println	-99
-2.196453	private	-99
-1.433025	public	-99
-2.117271	r1	-99
-2.895422	reallyCreative	-99
-1.816241	result	-99
-1.895423	return	-99
-2.196453	row	-99
-2.594393	setA	-99
-2.895422	setB	-99
-2.895422	setC	-99
-2.895422	setSize	-99
-2.594393	size	-99
-2.418301	slowfib	-99
-2.293363	square	-99
-2.050324	static	-99
-2.895422	string	-99
-1.691303	this	-99
-2.895422	time	-99
-2.895422	toString	-99
-2.895422	true	-99
-1.992333	v	-99
-2.594393	value	-99
-2.050324	void	-99
-2.594393	while	-99
-1.895423	x	-99
-2.594393	y	-99
-2.895422	z	-99
-1.390273	{	-99
-2.895422	||	-99
-1.390273	}	-99

\2-grams:
0	!= null
-0.146128	" +
-0.845098	" b
-0.845098	" c
0	"In method
0	"\n" )
0	"a =
-0.69897	&& (
-0.69897	&& row
-0.39794	&& this
-0.69897	&& value
-1.267172	( "In
-0.7231037	( )
-1.568202	( 0
-1.568202	( 10
-1.267172	( VanillaBoilerplate
-1.568202	( a
-1.568202	( base
-1.568202	( char
-1.568202	( exp
-0.526809	( int
-1.267172	( mat
-0.8692317	( n
-1.568202	( pos
-1.568202	( square
-1.568202	) &&
-1.568202	) +
-1.568202	) /
-0.6651117	) ;
-1.09108	) </s>
-0.2064739	) {
-0.30103	* fact
-0.30103	* pow
-0.69897	+ "
-0.69897	+ "\n"
-1	+ a
-1	+ b
-1	+ c
-0.69897	+ r1
-1	+ slowfib
-0.60206	++ )
-0.1249387	++ ;
-0.90309	, 0
-0.90309	, 15
-0.60206	, 5
-0.90309	, exp
-0.4259687	, int
-0.2218488	- 1
-0.69897	- 2
-0.69897	- b
-1.491362	. Rectangle
-0.5882717	. a
-1.491362	. awt
-0.6462637	. b
-0.6462637	. c
-1.190332	. length
-1.190332	. out
-1.190332	. println
-1.491362	. setSize
0	/ NANOS_PER_SEC
-0.8129134	0 )
-0.8129134	0 ,
-0.1597008	0 ;
-0.3679768	1 )
-0.3679768	1 ;
-0.845098	1 ||
-0.30103	10 ,
-0.30103	10 ;
0	1000000000.0 ;
0	15 )
0	2 )
-0.30103	5 )
-0.30103	5 ,
-0.01703334	; </s>
-1.414973	; i
-0.4771213	< list
-0.4771213	< numRows
-0.4771213	< size
-2.082785	<s> Rectangle
-1.781755	<s> System
-2.082785	<s> a
-2.082785	<s> b
-2.082785	<s> boolean
-2.082785	<s> c
-1.605664	<s> else
-2.082785	<s> final
-2.082785	<s> for
-1.605664	<s> if
-1.383815	<s> int
-2.082785	<s> list
-2.082785	<s> pos
-1.383815	<s> private
-0.7403627	<s> public
-2.082785	<s> r1
-1.304634	<s> result
-1.082785	<s> return
-2.082785	<s> row
-2.082785	<s> square
-1.082785	<s> this
-1.781755	<s> while
-1.128543	<s> {
-0.5776354	<s> }
-1.041393	= "
-1.518514	= (
-0.5642715	= 0
-1.041393	= 1
-1.518514	= 10
-1.518514	= 1000000000.0
-1.518514	= base
-1.518514	= c
-1.518514	= n
-1.518514	= new
-1.518514	= slowfib
-1.518514	= true
-1.041393	= v
-0.819544	= x
-1.518514	= y
-0.60206	== 0
-0.90309	== 1
-0.90309	== 2
-0.90309	== numRows
-0.4259687	== v
0	> pos
0	Eight </s>
0	Five </s>
0	Four </s>
-0.30103	NANOS_PER_SEC ;
-0.30103	NANOS_PER_SEC =
0	Nine </s>
-0.4771213	Rectangle (
-0.4771213	Rectangle ;
-0.4771213	Rectangle r1
0	Seven </s>
0	Six </s>
0	System .
0	Three </s>
0	Two </s>
-0.30103	VanillaBoilerplate (
-0.7781513	VanillaBoilerplate </s>
-0.4771213	VanillaBoilerplate v
-0.30103	[ ]
-0.7781513	[ i
-0.4771213	[ row
-0.7781513	] !=
-0.7781513	] ++
-0.7781513	] .
-0.7781513	] [
-0.7781513	] list
-0.7781513	] mat
-1.079181	a &&
-1.079181	a +
-1.079181	a -
-0.60206	a ;
-0.3802112	a =
-1.079181	a ==
0	add (
0	awt .
-1.079181	b &&
-1.079181	b )
-1.079181	b +
-0.60206	b ;
-0.3802112	b =
-1.079181	b ==
-0.4771213	base *
-0.1760913	base ,
-0.4771213	boolean equals
-0.4771213	boolean isSquare
-0.4771213	boolean square
-0.30103	c ;
-0.3802112	c =
-1.079181	c ==
0	char [
-0.9542425	class Eight
-0.9542425	class Five
-0.9542425	class Four
-0.9542425	class Nine
-0.9542425	class Seven
-0.9542425	class Six
-0.9542425	class Three
-0.9542425	class Two
-0.9542425	class VanillaBoilerplate
-0.30103	double NANOS_PER_SEC
-0.30103	double time
0	else </s>
0	equals (
-0.4771213	exp )
-0.4771213	exp -
-0.4771213	exp ==
0	fact (
-0.30103	final double
-0.30103	final int
0	for (
0	getA (
0	getB (
0	getC (
0	go. r1
-0.60206	i ++
-0.60206	i <
-0.60206	i =
-0.60206	i ]
0	if (
0	import java
-1.477121	int [
-1.477121	int a
-1.477121	int b
-1.477121	int base
-1.477121	int c
-1.477121	int exp
-1.477121	int fact
-1.477121	int getA
-1.477121	int getB
-1.477121	int getC
-1.477121	int i
-1.176091	int n
-1.477121	int numRows
-1.477121	int pos
-1.477121	int pow
-1	int result
-1.477121	int row
-1.477121	int size
-1.477121	int slowfib
-1.477121	int value
-0.7781513	int x
-1.477121	int y
-1.477121	int z
0	isSquare (
0	java .
-0.30103	length ;
-0.30103	length ==
-0.4771213	list )
-0.4771213	list .
-0.4771213	list [
-0.4771213	mat )
-0.1760913	mat [
0	method go.
-0.6532125	n )
-0.9542425	n *
-0.4771213	n -
-0.4771213	n ==
0	new Rectangle
0	null )
-0.1760913	numRows )
-0.4771213	numRows =
0	ohsocreative (
0	out .
-0.60206	pos )
-0.60206	pos ++
-0.60206	pos <
-0.60206	pos =
0	pow (
0	println (
-0.09691001	private int
-0.69897	private static
-0.9852768	public VanillaBoilerplate
-1.462398	public boolean
-0.5081555	public class
-1.462398	public double
-0.9852768	public int
-0.6842467	public static
-1.462398	public string
-0.763428	public void
-0.4771213	r1 "
-0.4771213	r1 +
-0.7781513	r1 .
-0.7781513	r1 =
0	reallyCreative (
-0.60206	result ;
-0.1249387	result =
-1	return "a
-1	return (
-0.5228788	return result
-1	return square
-0.39794	return this
-0.69897	row ++
-0.69897	row <
-0.69897	row =
-0.39794	row ]
0	setA (
0	setB (
0	setC (
0	setSize (
-0.30103	size &&
-0.30103	size ;
0	slowfib (
-0.60206	square &&
-0.60206	square ;
-0.30103	square =
-0.845098	static boolean
-0.845098	static final
-0.3679768	static int
-0.544068	static void
0	string toString
0	this .
0	time (
0	toString (
0	true ;
-0.60206	v )
-0.1249387	v .
-0.30103	value )
-0.30103	value >
-0.845098	void add
-0.845098	void ohsocreative
-0.845098	void reallyCreative
-0.544068	void setA
-0.845098	void setB
-0.845098	void setC
0	while (
-0.39794	x )
-1	x ,
-0.30103	x ;
-0.30103	y ,
-0.30103	y ;
0	z )
0	{ </s>
0	|| n
-0.1249387	} </s>
-1.50515	} import
-0.6600519	} public

\end\
